"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
"""
import telebot

from app_cart.models import Cart, CartItem
from app_products.models import Category, Product

START_KEYBOARD_VALUES = ['üõç–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', 'üìù–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', '‚ùì–û –±–æ—Ç–µ']


def make_keyboard(values, width=1, back=False, cart=False):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è API
    :param values: list
    :param width: int
    :param back: bool
    :param cart: bool
    :return: ReplyKeyboardMarkup
    """
    # return telebot.types.ReplyKeyboardMarkup(row_width=width).add(*[telebot.types.KeyboardButton(item) for item in values])
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=width)
    markups = list()
    if values:
        for item in values:
            itembtn = telebot.types.KeyboardButton(item)
            markups.append(itembtn)
        keyboard.add(*markups)
    if cart:
        cartbtn = telebot.types.KeyboardButton('üõí–ö–æ—Ä–∑–∏–Ω–∞')
        keyboard.add(cartbtn)
    if back:
        backbtn = telebot.types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
        keyboard.add(backbtn)
    return keyboard


def make_start_keyboard(*args, **kwargs):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :return: ReplyKeyboardMarkup
    """
    return make_keyboard(START_KEYBOARD_VALUES, 1)


def make_categories_keyboard(*args, **kwargs):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î
    :return: ReplyKeyboardMarkup
    """
    category_names = [item.category_name for item in Category.objects.all()]
    return make_keyboard(category_names, width=2, back=True, cart=True)


def make_products_keyboard(*args, **kwargs):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    :param kwargs: context
    :return: ReplyKeyboardMarkup
    """
    category_name = kwargs['category']
    category = Category.objects.get(category_name=category_name)
    product_names = [item.name for item in Product.objects.filter(category=category)]
    return make_keyboard(product_names, width=2, back=True)


def make_product_inline(quantity=1, *args, **kwargs):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø—Ä–æ–¥—É–∫—Ç–µ
    :param quantity: int
    :return: InlineKeyboardMarkup
    """
    inline_markup = telebot.types.InlineKeyboardMarkup(row_width=3)
    minus = telebot.types.InlineKeyboardButton(text='‚ûñ', callback_data='minus')
    value = telebot.types.InlineKeyboardButton(text='{}'.format(quantity), callback_data=quantity)
    plus = telebot.types.InlineKeyboardButton(text='‚ûï', callback_data='plus')
    inline_markup.add(minus, value, plus)
    done = telebot.types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data='done')
    inline_markup.add(done)
    return inline_markup


def make_cart_inline(user_account):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–∑–∏–Ω—ã
    :param user_account: TelegramUser
    :return: InlineKeyboardMarkup
    """
    x = '\U0000274c'
    cart = Cart.objects.get(user=user_account)
    cart_items = sorted([item for item in CartItem.objects.filter(cart=cart)], key=lambda x: x.id)
    inline_markup = telebot.types.InlineKeyboardMarkup(row_width=3)
    for cart_item in cart_items:
        cancel = telebot.types.InlineKeyboardButton(text=f'{x} {cart_item.product.name}',
                                                    callback_data=f'{cart_item.id}&cancel')
        inline_markup.add(cancel)
        minus = telebot.types.InlineKeyboardButton(text='‚ûñ', callback_data=f'{cart_item.id}&minus')
        value = telebot.types.InlineKeyboardButton(text='{}'.format(cart_item.quantity),
                                                   callback_data=cart_item.quantity)
        plus = telebot.types.InlineKeyboardButton(text='‚ûï', callback_data=f'{cart_item.id}&plus')
        inline_markup.add(minus, value, plus)
    return inline_markup


def make_cart_keyboard(*args, **kwargs):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    :return: ReplyKeyboardMarkup
    """
    buttons = ['‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'üîÅ–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É']
    return make_keyboard(values=buttons, width=1, back=True)


def make_share_contact_button(*args, **kwargs):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    contact_key = telebot.types.KeyboardButton("‚òéÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    keyboard.add(contact_key)
    backbtn = telebot.types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    keyboard.add(backbtn)
    return keyboard


def make_share_location_button(*args, **kwargs):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    contact_key = telebot.types.KeyboardButton("üìçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)
    keyboard.add(contact_key)
    backbtn = telebot.types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    keyboard.add(backbtn)
    return keyboard


def make_back_button(*args, **kwargs):
    return make_keyboard(None, back=True)
